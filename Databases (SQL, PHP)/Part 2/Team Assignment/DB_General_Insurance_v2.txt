DROP DATABASE IF EXISTS GENERAL_INSURANCE;
CREATE DATABASE GENERAL_INSURANCE;
USE GENERAL_INSURANCE;


-- STEP 1 & 2
CREATE TABLE INSURANCE_COVERS(
	INSUR_CODE INT(2) NOT NULL,
	DESCRIPTION VARCHAR(30) NOT NULL,
	COST_YEARLY INT NOT NULL,
	MIN_VALIDITY_MONTHLY INT NOT NULL,
	PRIMARY KEY (INSUR_CODE)
);

CREATE TABLE BENEFITS(
	INSUR_CODE INT(2) NOT NULL,
	DESCRIPTION VARCHAR(30),
	FOREIGN KEY (INSUR_CODE) REFERENCES INSURANCE_COVERS(INSUR_CODE)
);

CREATE TABLE CUSTOMERS(
	AFM INT NOT NULL,
	FULL_NAME VARCHAR(40),
	ADDRESS VARCHAR(30),
	PHONE VARCHAR(15),
	DOY VARCHAR(20),
	PRIMARY KEY (AFM)
);

CREATE TABLE CONTRACTS(
	AFM INT NOT NULL,
	INSUR_CODE INT(2) NOT NULL,
	SIGN_DATE DATE,
	EXPIR_DATE DATE,
	FOREIGN KEY (AFM) REFERENCES CUSTOMERS(AFM),
	FOREIGN KEY (INSUR_CODE) REFERENCES INSURANCE_COVERS(INSUR_CODE)
);


-- DATABASE INSERTIONS
INSERT INTO INSURANCE_COVERS (INSUR_CODE, DESCRIPTION, COST_YEARLY, MIN_VALIDITY_MONTHLY) VALUES
	(10, 'Health Insurance', 125, 12),
	(11, 'Critical Illness Cover', 210,  24),
	(12, 'Home insurance', 130, 18),
	(13, 'Car insurance', 75, 6);

INSERT INTO BENEFITS (INSUR_CODE, DESCRIPTION) VALUES
	(10, 'Free Ambulance Transporation'),
	(10, 'Half Price Prescriptions'),
	(10, 'Free Check Ups'),
	(11, 'Free Ambulance Transporation'),
	(11, 'Free Prescriptions'),
	(11, 'Free Check Ups'),
	(11, 'Free ICU Entry'),
	(12, 'Fire Hazard Damage'),
	(12, 'House Burglary'),
	(12, 'Earthquake Damage'),
	(13, 'Car Check Up'),
	(13, 'Car Theft'),
	(13, 'Emergency Car Transportation');

INSERT INTO CUSTOMERS (AFM, FULL_NAME, ADDRESS, PHONE, DOY) VALUES
	(18390008, 'Eleftherios Vangelis', 'Thiseos 85', '2109518352', 'Kallitheas'),
	(18390037, 'Antonios Thomakos', 'Platonou 68', '2109742543', 'Peristeriou'),
	(54235325, 'Kwstantinos Mantolinos', 'Spartis 90','2905432526', 'Kifisias'),
	(13295032, 'Giorgos Manolakis', 'Triantafilou 13','2109734512', 'Petralwnwn'),
	(33292346, 'Dimitrios Georgiakos', 'Kwnstantinoupoleos 32','2109543123', 'Kipselis');

INSERT INTO CONTRACTS (AFM, INSUR_CODE, SIGN_DATE, EXPIR_DATE) VALUES
	(18390008, 10, '2020-1-1','2022-1-1'), (18390008, 12, '2019-2-17','2022-2-17'),
	(18390037, 10, '2019-6-14','2021-6-14'), (18390037, 13, '2020-8-18','2021-8-18'),
	(54235325, 10, '2018-12-25','2020-12-25'), (54235325, 12, '2020-12-15','2023-12-15'), (54235325, 13, '2020-3-3','2021-3-3'),
	(13295032, 11, '2020-5-13','2023-5-13'), (13295032, 12, '2019-4-2','2022-4-2'),
	(33292346, 11, '2018-3-17','2021-3-17'), (33292346, 12, '2018-1-2','2021-1-2'), (33292346, 13, '2020-11-27','2021-11-27');
	
-- STEP 4
CREATE VIEW information
AS
SELECT FULL_NAME AS 'Customer name',
DESCRIPTION AS 'Coverage', 
COST_YEARLY AS 'Cost per year', 
MIN_VALIDITY_MONTHLY AS 'Minimum validity months',
SIGN_DATE AS 'Date signed',
EXPIR_DATE AS 'Expiration date'
FROM CUSTOMERS 
INNER JOIN CONTRACTS USING (AFM)
INNER JOIN INSURANCE_COVERS USING (INSUR_CODE)
ORDER BY FULL_NAME;

CREATE VIEW update_information
AS 
SELECT FULL_NAME,
AFM,
ADDRESS,
PHONE,
DOY
FROM CUSTOMERS 
ORDER BY FULL_NAME;

-- UPDATABLE VIEW TEST
UPDATE update_information 
SET PHONE = '2106401464' WHERE AFM = 18390037;

-- STEP 5
SELECT INSURANCE_COVERS.DESCRIPTION AS 'Contract',
COUNT(CONTRACTS.INSUR_CODE) AS 'Number of contracts' 
FROM CONTRACTS 
INNER JOIN INSURANCE_COVERS USING (INSUR_CODE) 
GROUP BY CONTRACTS.INSUR_CODE;

SELECT FULL_NAME AS 'Customer', 
SUM(COST_YEARLY) AS 'Total contracts cost' 
FROM CONTRACTS 
INNER JOIN INSURANCE_COVERS USING (INSUR_CODE) 
INNER JOIN CUSTOMERS USING (AFM) 
GROUP BY AFM 
ORDER BY SUM(COST_YEARLY) DESC;

-- ADD COST_OF_CONTRACTS COLUMN IN COSTUMERS
ALTER TABLE CUSTOMERS ADD(COST_OF_CONTRACTS INT);
UPDATE CUSTOMERS SET COST_OF_CONTRACTS = 
	(select sum(COST_YEARLY) from CONTRACTS, INSURANCE_COVERS
	where CUSTOMERS.AFM = CONTRACTS.AFM AND CONTRACTS.INSUR_CODE = INSURANCE_COVERS.INSUR_CODE
	GROUP BY CUSTOMERS.AFM);

-- 6. TRIGGER
DELIMITER //
CREATE TRIGGER CONTRACTS_INSERT
AFTER INSERT ON CONTRACTS
FOR EACH ROW
BEGIN
UPDATE CUSTOMERS SET COST_OF_CONTRACTS = 
	IFNULL(COST_OF_CONTRACTS, 0) + (
		SELECT COST_YEARLY FROM INSURANCE_COVERS
		where INSURANCE_COVERS.INSUR_CODE = NEW.INSUR_CODE)
	WHERE CUSTOMERS.AFM = NEW.AFM;
END;//
DELIMITER ;

-- TRIGGER TEST
SELECT * FROM CUSTOMERS;
INSERT INTO CONTRACTS (AFM, INSUR_CODE, SIGN_DATE, EXPIR_DATE) 
	VALUES (18390008, 11, '2020-4-5','2023-4-5'),
	(18390037, 12, '2022-6-14','2023-6-14'); 
SELECT * FROM CUSTOMERS;

-- 7. FUNCTION
DELIMITER //
CREATE FUNCTION getContractDuration(startdate DATE, enddate DATE)
RETURNS VARCHAR(100)
DETERMINISTIC
BEGIN
DECLARE daysdiff INT;
DECLARE yearsleft INT;
DECLARE monthsleft INT;
DECLARE daysleft INT;
DECLARE daysandmonthsleft INT;
SET daysdiff := DATEDIFF(enddate, startdate);
IF (daysdiff > 365) THEN
	SET yearsleft := daysdiff DIV 365;
    SET daysandmonthsleft := daysdiff MOD 365;
    SET monthsleft := daysandmonthsleft DIV 30;
    SET daysleft := daysandmonthsleft MOD 30;
    RETURN CONCAT(yearsleft, ' YEARS ', monthsleft, ' MONTHS ', daysleft, ' DAYS');
ELSEIF (daysdiff > 30) THEN
	SET monthsleft := daysdiff DIV 30;
    SET daysleft := daysdiff MOD 30;
    RETURN CONCAT(monthsleft, ' MONTHS ', daysleft, ' DAYS');
ELSE
	RETURN CONCAT(daysdiff, ' DAYS');
END IF;
END//
DELIMITER ;

-- TESTING VIEWS
CREATE VIEW getSIGNDATEforAntonis AS
SELECT SIGN_DATE FROM CONTRACTS WHERE AFM = 18390037 AND INSUR_CODE = 10;
CREATE VIEW getEXPIRDATEforAntonis AS
SELECT EXPIR_DATE FROM CONTRACTS WHERE AFM = 18390037 AND INSUR_CODE = 10;

-- FUNCTION TEST
SELECT getContractDuration (
(SELECT * FROM getSIGNDATEforAntonis),
(SELECT * FROM getEXPIRDATEforAntonis)
);

-- 8. PROCEDURE
DELIMITER //
CREATE PROCEDURE getClientInfoMonthly(targetAFM INT, tdate DATE)
BEGIN
DECLARE startrow INT DEFAULT 0;
DECLARE endrow INT DEFAULT 0;
DECLARE contractscount INT DEFAULT 0;
DECLARE totalcost INT DEFAULT 0;
DECLARE cost INT DEFAULT 0;
DECLARE icode INT;
DECLARE startdate DATE;
DECLARE enddate DATE;
DECLARE AFMcheck INT;
DECLARE contractptr CURSOR FOR SELECT * from CONTRACTS;
SELECT COUNT(*) FROM CONTRACTS INTO endrow;
SET startrow := 0;
SET contractscount := 0;
SET totalcost := 0;
OPEN contractptr;
WHILE (startrow < endrow) DO
	FETCH contractptr INTO AFMcheck, icode, startdate, enddate;
    SELECT COST_YEARLY FROM INSURANCE_COVERS WHERE INSUR_CODE = icode INTO cost;
    
	IF (AFMcheck = targetAFM) THEN
        IF (tdate >= startdate AND tdate <= enddate) THEN
			SET contractscount := contractscount + 1;
            SET totalcost := totalcost + cost;
		END IF;
	END IF;
    
    SET startrow := startrow + 1;
END WHILE;
SELECT contractscount AS 'Contracts at given month', totalcost/12 AS 'Contracts cost at given month';
END//
DELIMITER ;

-- PROCEDURE TEST
CALL getClientInfoMonthly(18390037, '2020-09-01');
